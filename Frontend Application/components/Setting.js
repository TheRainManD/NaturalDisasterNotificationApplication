import React from 'react';
import {Text, StyleSheet, View, PermissionsAndroid} from 'react-native';
import {
  Appbar,
  TouchableRipple,
  Portal,
  Modal,
  Avatar,
  List,
  Switch,
} from 'react-native-paper';
import auth from '@react-native-firebase/auth';
import {
  unregisterToken,
  submitLocation,
  getAllLocationOptions,
  getAllTopicOptions,
  getUserLocations,
  getUserSubscriptions,
  submitSubscription,
  getGeofence,
  putGeofence,
} from '../backend/backend';
import {useState} from 'react';
import {useEffect} from 'react';
import ItemPicker from './ItemPicker';
import {FlatList} from 'react-native-gesture-handler';
import LocationPicker from './LocationPicker';
import Radar from 'react-native-radar';
import PushNotification from 'react-native-push-notification';

const Setting = ({navigation}) => {
  const [visible, setVisible] = useState({
    subscription: false,
    location: false,
    map: false,
  });

  const [locations, setLocations] = useState([]);
  const [subscriptions, setSubscriptions] = useState([]);
  const [topicOptions, setTopicOptions] = useState([]);
  const [geofence, setGeofence] = useState(false);

  useEffect(() => {
    let isMounted = true; // mount status
    if (isMounted) {
      getAllTopicOptions(setTopicOptions);
      getUserLocations(setLocations);
      getUserSubscriptions(setSubscriptions);
      getGeofence().then(data => {
        // console.log(data.geofence);
        setGeofence(data.geofence);
        if (data.geofence) {
          Radar.on('events', result => {
            // do something with result.events, result.user
            console.log('event', result.events[0]);
            const event = result.events[0];
            if (event.type == 'user.entered_geofence') {
              // console.log('user entered geofence');
              PushNotification.localNotification({
                /* Android Only Properties */
                channelId: 'cmpe295', // (required) channelId, if the channel doesn't exist, notification will not trigger.
                vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000

                /* iOS and Android properties */
                id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                title: 'Disaster Alert', // (optional)
                message: event.geofence.description, // (required)

                number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
                repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
              });
            }
          });
          Radar.startTrackingContinuous();
          console.log('started tracking');
        }
      });
    }

    return () => {
      isMounted = false;
    };
  }, []);

  const renderSettingItem = item => {
    if (item.item.extend) {
      return (
        <TouchableRipple
          key={item.item.text}
          rippleColor="rgba(0, 0, 0, .10)"
          style={styles.item}
          onPress={item.item.onPress}>
          <View style={{flexDirection: 'row', alignItems: 'center'}}>
            <Avatar.Icon
              icon={item.item.icon}
              size={30}
              style={{
                marginRight: 10,
                backgroundColor: 'rgba(29, 161, 242,0.9)',
              }}
              color={'white'}
            />
            <Text style={{fontSize: 15, flexGrow: 1}}>{item.item.text}</Text>
            <List.Icon
              icon="chevron-right"
              color={'rgba(0,0,0,0.6)'}
              style={{margin: 0, padding: 0}}
            />
            {/* <Text style={{fontSize: 20, alignSelf: 'flex-end', color: 'gray'}}>
              {'>'}
            </Text> */}
          </View>
        </TouchableRipple>
      );
    } else if (item.item.radio) {
      return (
        <TouchableRipple
          key={item.item.text}
          rippleColor="rgba(0, 0, 0, .10)"
          style={styles.item}
          onPress={item.item.onPress}>
          <View style={{flexDirection: 'row', alignItems: 'center'}}>
            <Avatar.Icon
              icon={item.item.icon}
              size={30}
              style={{
                marginRight: 10,
                backgroundColor: 'rgba(29, 161, 242,0.9)',
              }}
              color={'white'}
            />
            <Text
              style={{
                fontSize: 13,
                flexGrow: 1,
                color: 'rgba(0,0,0,1)',
              }}>
              {item.item.text}
            </Text>
            <Switch
              value={geofence}
              onValueChange={() => {
                if (geofence) {
                  Radar.off('events');
                  Radar.stopTracking();
                  console.log('stopped tracking');
                } else {
                  Radar.on('location', result => {
                    // do something with result.location, result.user
                    console.log(result);
                  });
                  Radar.on('events', result => {
                    // do something with result.events, result.user
                    console.log('event', result.events[0]);
                    const event = result.events[0];
                    if (event.type == 'user.entered_geofence') {
                      // console.log('user entered geofence');
                      PushNotification.localNotification({
                        /* Android Only Properties */
                        channelId: 'cmpe295', // (required) channelId, if the channel doesn't exist, notification will not trigger.
                        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000

                        /* iOS and Android properties */
                        id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                        title: 'Disaster Alert', // (optional)
                        message: event.geofence.description, // (required)

                        number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
                        repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
                      });
                    }
                  });
                  Radar.startTrackingContinuous();
                  console.log('started tracking');
                }
                putGeofence(!geofence);
                setGeofence(!geofence);
              }}
              color={'rgba(29, 161, 242, 0.9)'}
              style={{marginRight: 5}}
            />
          </View>
        </TouchableRipple>
      );
    } else {
      return (
        <TouchableRipple
          key={item.item.text}
          rippleColor="rgba(0, 0, 0, .10)"
          style={styles.item}
          onPress={item.item.onPress}>
          <View style={{flexDirection: 'row', alignItems: 'center'}}>
            <Avatar.Icon
              icon={item.item.icon}
              size={30}
              style={{
                marginRight: 10,
                backgroundColor: 'rgba(29, 161, 242,0.9)',
              }}
              color={'white'}
            />
            <Text style={{fontSize: 15, flexGrow: 1, color: 'rgba(0,0,0,1)'}}>
              {item.item.text}
            </Text>
          </View>
        </TouchableRipple>
      );
    }
  };

  const renderModal = modal => {
    return (
      <Modal
        visible={modal.visible}
        key={modal.key}
        onDismiss={modal.onDismiss}
        contentContainerStyle={styles.modal}>
        {modal.component}
      </Modal>
    );
  };

  const settingItems = [
    {
      text: 'Manage topic selection',
      icon: 'playlist-check',
      extend: true,
      onPress: () => {
        setVisible({...visible, subscription: true});
      },
    },
    {
      text: 'My Locations',
      icon: 'map-marker-multiple',
      extend: true,
      onPress: () => {
        setVisible({...visible, location: true});
      },
    },
    {
      text: 'Receive notification if within range',
      icon: 'selection-marker',
      extend: false,
      radio: true,
      textSize: 10,
      onPress: () => {
        // setVisible({...visible, location: true});
      },
    },
    {
      text: 'Logout',
      icon: 'logout',
      extend: false,
      onPress: () => {
        unregisterToken();
        auth().signOut();
      },
    },
  ];

  const modals = [
    {
      key: 'subscription',
      component: (
        <ItemPicker
          items={subscriptions}
          setItems={setSubscriptions}
          options={topicOptions}
        />
      ),
      visible: visible.subscription,
      onDismiss: () => {
        setVisible({...visible, subscription: false});
        submitSubscription(subscriptions);
      },
    },
    {
      key: 'location',
      component: (
        <LocationPicker locations={locations} setLocations={setLocations} />
      ),
      visible: visible.location,
      onDismiss: () => {
        setVisible({...visible, location: false});
        submitLocation(locations);
      },
    },
  ];

  return [
    <Appbar.Header
      style={{
        backgroundColor: 'white',
        borderBottomColor: 'gray',
        borderBottomWidth: 0.15,
      }}
      key="appbar">
      <Appbar.Content
        title="Profile Settings"
        color={'rgba(0,0,0,0.7)'}
        titleStyle={{fontSize: 15, paddingLeft: 5}}
      />
      <Appbar.Action
        icon="cog"
        size={20}
        color={'rgba(0,0,0,0.7)'}
        onPress={() => {
          navigation.navigate('Profile');
        }}
      />
    </Appbar.Header>,
    <View style={styles.container} key="main">
      <FlatList
        data={settingItems}
        keyExtractor={item => item.text}
        renderItem={renderSettingItem}
      />
      <Portal>
        {modals.map(modal => {
          return renderModal(modal);
        })}
      </Portal>
    </View>,
  ];
};

const styles = StyleSheet.create({
  container: {
    marginTop: 5,
    flexDirection: 'column',
  },
  item: {
    paddingLeft: 20,
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderColor: '#e6e6e6',
    height: 50,
    flexDirection: 'row',
    alignItems: 'center',
  },
  modal: {
    backgroundColor: 'white',
    padding: 20,
    height: '80%',
    width: '90%',
    alignSelf: 'center',
  },
});

export default Setting;
